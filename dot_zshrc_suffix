
setopt NO_HUP
setopt NO_CHECK_JOBS

limit coredumpsize unlimited

export                  BOOST_TEST_BUILD_INFO="${BOOST_TEST_BUILD_INFO:-yes}"
export                BOOST_TEST_COLOR_OUTPUT="${BOOST_TEST_COLOR_OUTPUT:-yes}"
export                   BOOST_TEST_LOG_LEVEL="${BOOST_TEST_LOG_LEVEL:-message}"
export                BOOST_TEST_REPORT_LEVEL="${BOOST_TEST_REPORT_LEVEL:-short}"
export                              BUILDTYPE="${BUILDTYPE:-ninja_clang_rwdi}"
export                 BUILD_EXTRA_CATH_TESTS="${BUILD_EXTRA_CATH_TESTS:-ON}"
export                 BUILD_EXTRA_CATH_TOOLS="${BUILD_EXTRA_CATH_TOOLS:-ON}"
export          CMAKE_EXTRACTED_COMPILE_FLAGS="${CMAKE_EXTRACTED_COMPILE_FLAGS:- --you-have-not-yet-extracted-valid-compile-flags }"
export                        CMAKE_GENERATOR="${CMAKE_GENERATOR:-Ninja}"
export                CTEST_OUTPUT_ON_FAILURE="${CTEST_OUTPUT_ON_FAILURE:-1}"
export MXX_ALWAYS_THROW_ON_CONTRACT_VIOLATION="${MXX_ALWAYS_THROW_ON_CONTRACT_VIOLATION:-1}"
export          MXX_ANNOTATE_DJANGO_DEVELMODE="${MXX_ANNOTATE_DJANGO_DEVELMODE:-1}"
export                     MXX_DEVELOPER_MODE="${MXX_DEVELOPER_MODE:-1}"
export           MXX_EDIT_SUITE_PROJECT_LEVEL="${MXX_EDIT_SUITE_PROJECT_LEVEL:-AUDIO}"
export       MXX_TRACKLOOPER_DJANGO_DEVELMODE="${MXX_TRACKLOOPER_DJANGO_DEVELMODE:-1}"
export    TRILLER_ANNOTATION_DJANGO_DEVELMODE="${TRILLER_ANNOTATION_DJANGO_DEVELMODE:-1}"
export                          UBSAN_OPTIONS="${UBSAN_OPTIONS:- print_stacktrace=1 }"
# export                          UBSAN_OPTIONS="${UBSAN_OPTIONS:- print_stacktrace=1 suppressions=ubsan-suppressions.txt }"

# export                                   PATH=~/.local/bin:~/bin:~/puppet/perl/tools:$PATH:/usr/local/cuda/bin
# ~/.local/bin is for Conan
#   --- is this needed any more? - trying without it it see if anything breaks
export                                   PATH=~/bin:~/puppet/perl/tools:$PATH:/usr/local/cuda/bin

# export                DBIC_TRACE_PROFILE=console
# export                            EDITOR=vim

# Resort to, eg, put the [...]_test.cpp before the [...].cpp
#
# Use like `find -iname '*.cpp' | mysortpipe`
#
# This appears before the other aliases so they can use it
alias             auto='libtoolize --force;aclocal;autoconf;touch NEWS AUTHORS README ChangeLog;automake --add-missing'
alias        datestamp='date +%Y%m%d'
alias              gwl='git worktree list'
alias          lastcol='awk '\''{print $NF}'\'
alias         lsbigmov='find . \( -name "*.mp4" -o -name "*.wmv" -o -name "*.mp*g" -o -name "*.avi" -o -name "*.mov" -o -name "*.flv" -o -name "*.asf" \) -a -size +30M'
alias              lsc='find . \( -name "*.c" -o -name "*.cpp" -o -name "*.cu" -o -name "*.cuh" -o -name "*.cxx" -o -name "*.h" -o -name "*.hpp" -o -name "*.tex" \) -print                                   | grep -vP "\/\.backup\." | grep -vP "\/\.kate-backup" | sed "s/^\.\///g" | grep -vP "^(\.venv|\.vscode-cmake-build|3rdparty|cpp-external-lib|misc/deprecated_code|ninja_|range-v3|third-party-code)" | mysortpipe '
alias              lsj='find . \( -path "./node_modules" -o -path "./.venv" \) -prune -o -iname "*.ts" -o -iname "*.tsx" -o -iname "*.js" -o -iname "*.jsx" | grep -vP "^\.\/(\.venv|node_modules)" | grep -vP "next\/(server|static)\/" | sed "s/^\.\///g" | mysortpipe '
alias            lscol='ls --color=always '
alias             lsmd='find . -iname "*.md" | grep -vP "\.venv\b" | mysortpipe '
alias            lsmov='find . -name "*.mp4" -o -name "*.wmv" -o -name "*.mp*g" -o -name "*.avi" -o -name "*.mov" -o -name "*.flv" -o -name "*.asf"'
alias              lsp='find script lib t -iname "*.pm" -o -iname "*.pl" -o -name "*.t" | mysortpipe '
alias              lsq='find . -iname "*.qml" | mysortpipe '
alias              lsy='find . -iname "*.py" | grep -vP "\.venv\b" | mysortpipe '
alias             lx53='cd / ; ssh bsmlx53'
alias             lx62='cd / ; ssh bsmlx62'
alias         makevenv='python3 -m venv --prompt $( basename $PWD ) .venv'
alias      makevenv3.6='python3.6 -m venv --prompt $( basename $PWD ) .venv'
alias      makevenv3.7='python3.7 -m venv --prompt $( basename $PWD ) .venv'
alias      makevenv3.8='python3.8 -m venv --prompt $( basename $PWD ) .venv'
alias              msc='find . \( -name "*.c" -o -name "*.cpp" -o -name "*.cu" -o -name "*.cuh" -o -name "*.cxx" -o -name "*.h" -o -name "*.hpp" -o -name "*.tex" \) -print | grep -vw temp_experimental_code | grep -vP "\/\.backup\." | grep -vP "\/\.kate-backup" | sed "s/^\.\///g" | grep -vP "^(ninja_|3rdparty|autogen|other_stuff|build-deps-graph)"                   | mysortpipe '
alias       mysortpipe='sed "s/_test\./#test\./g" | env LC_ALL=C sort | tr "#" "_" '
alias present-profiles='find . -maxdepth 1 -type d -name "ninja_*" -printf "%f\n" | sed "s/^ninja_//g" | sort | tr "\n" " " '
alias      recmake-all='cmake-all-of $( present-profiles )'
alias             svba='source .venv/bin/activate'
alias        timestamp='date +%Y%m%d-%H%M%S'
alias             wget='wget -U Firefox --content-disposition'

function bpn {
	bat --paging=never $@
}

function lgt {
	( git --no-pager log -n 1500 --color --all --decorate --oneline --graph --format=format:"%C(auto)%h%C(reset)%C(auto)%d%C(reset) %C(white)%s%C(reset)   %C(blue)%an, %ar%C(reset)" $@ && echo ) | tac | perl -pe 's/(\w+)\\([^[:print:]])/\1#\2/g; s/(\w+)\/([^[:print:]])/\1\\\2/g; s/(\w+)#([^[:print:]])/\1\/\2/g;'
}

#function cmake_all_ninjas() {
#	rm    -rf ninja_clang_debug_shared ninja_clang_release ninja_clang_rwdi ninja_gcc_debug_shared ninja_gcc_release ninja_gcc_rwdi
#	mkdir -p  ninja_clang_debug_shared ninja_clang_release ninja_clang_rwdi ninja_gcc_debug_shared ninja_gcc_release ninja_gcc_rwdi
#	(cd ninja_clang_debug_shared && cmake -GNinja -DCMAKE_BUILD_TYPE=DEBUG          -DBUILD_SHARED_LIBS=ON -DBUILD_EXTRA_CATH_TOOLS=ON -DBUILD_EXTRA_CATH_TESTS=ON -DBOOST_ROOT=/opt/boost_1_70_0_clang_c++14_build -DCMAKE_C_COMPILER=/usr/bin/clang -DCMAKE_CXX_COMPILER=/usr/bin/clang++ -DCMAKE_CXX_FLAGS="-stdlib=libc++" .. )
#	(cd ninja_clang_release      && cmake -GNinja -DCMAKE_BUILD_TYPE=RELEASE                               -DBUILD_EXTRA_CATH_TOOLS=ON -DBUILD_EXTRA_CATH_TESTS=ON -DBOOST_ROOT=/opt/boost_1_70_0_clang_c++14_build -DCMAKE_C_COMPILER=/usr/bin/clang -DCMAKE_CXX_COMPILER=/usr/bin/clang++ -DCMAKE_CXX_FLAGS="-stdlib=libc++" .. )
#	(cd ninja_clang_rwdi         && cmake -GNinja -DCMAKE_BUILD_TYPE=RELWITHDEBINFO                        -DBUILD_EXTRA_CATH_TOOLS=ON -DBUILD_EXTRA_CATH_TESTS=ON -DBOOST_ROOT=/opt/boost_1_70_0_clang_c++14_build -DCMAKE_C_COMPILER=/usr/bin/clang -DCMAKE_CXX_COMPILER=/usr/bin/clang++ -DCMAKE_CXX_FLAGS="-stdlib=libc++" .. )
#	(cd ninja_gcc_debug_shared   && cmake -GNinja -DCMAKE_BUILD_TYPE=DEBUG          -DBUILD_SHARED_LIBS=ON -DBUILD_EXTRA_CATH_TOOLS=ON -DBUILD_EXTRA_CATH_TESTS=ON -DBOOST_ROOT=/opt/boost_1_70_0_gcc_c++14_build                                                                                                              .. )
#	(cd ninja_gcc_release        && cmake -GNinja -DCMAKE_BUILD_TYPE=RELEASE                               -DBUILD_EXTRA_CATH_TOOLS=ON -DBUILD_EXTRA_CATH_TESTS=ON -DBOOST_ROOT=/opt/boost_1_70_0_gcc_c++14_build                                                                                                              .. )
#	(cd ninja_gcc_rwdi           && cmake -GNinja -DCMAKE_BUILD_TYPE=RELWITHDEBINFO                        -DBUILD_EXTRA_CATH_TOOLS=ON -DBUILD_EXTRA_CATH_TESTS=ON -DBOOST_ROOT=/opt/boost_1_70_0_gcc_c++14_build                                                                                                              .. )
#}

function cmake-all-of() {(
	# Stop as soon as anything fails
	set -e
	setopt no_unset

	setopt extendedglob

	ORIG_LOCATION=$PWD

	# Directory for checking which profiles exist
	#
	# (TODO: For Conan profiles, could consider testing the return code of `conan profile show <profile>`.
	#  Is that too slow? Could be parallelised?)
	CONAN_PROFILE_DIR="${HOME}/.conan/profiles"

	# Check each profile has an associated Conan profile file and a CMake toolchain file
	for PROFILE_NAME in "$@" ; do
		REQUIRED_FILES=( "${HOME}/puppet/toolchain-files/${PROFILE_NAME}.cmake" "${CONAN_PROFILE_DIR}/${PROFILE_NAME}" )
		for REQUIRED_FILE in $REQUIRED_FILES ; do
			if [[ ! -f ${REQUIRED_FILE} ]]; then
				echo "File ${REQUIRED_FILE} required for profile ${PROFILE_NAME} does not exist (or isn't a file)"
				return
			fi
		done
	done

	# For each profile:
	#  * wipe any previous build directory
	#  * create a fresh build directory
	#  * Run Conan in the buld directory for the correct profile
	#  * Run CMake in the buld directory for the correct profile
	#
	#############################
	#
	# CAN THIS EAILY BE MADE TO PARALLELISE?
	# MAYBE WITH COMMAND & AND WAIT?
	#
	#############################
	for PROFILE_NAME in "$@"
	do
		CMAKE_TOOLCHAIN_FILE="${HOME}/puppet/toolchain-files/${PROFILE_NAME}.cmake"
		NINJA_VERSION_OF_FOLDER="ninja_${PROFILE_NAME}"
		ABS_NINJA_VERSION_OF_FOLDER=$(realpath "${NINJA_VERSION_OF_FOLDER}")

		set -x
		rm -rf "${NINJA_VERSION_OF_FOLDER}"
		mkdir -p "${NINJA_VERSION_OF_FOLDER}"
		if [[ -f 'conanfile.txt' || -f 'conanfile.py' ]]; then
			PROJECT_SOURCE_DIR_NAME=$( realpath "${ORIG_LOCATION}" | xargs -I VAR basename VAR )
			PROJECT_SOURCE_DIR_NAME_STRIPPED=${PROJECT_SOURCE_DIR_NAME%%\-[[:digit:]]##}

			# echo "PROJECT_SOURCE_DIR_NAME_STRIPPED is ${PROJECT_SOURCE_DIR_NAME_STRIPPED}"
			PROJECT_SPECIFIC_PROFILE="${CONAN_PROFILE_DIR}/project/${PROJECT_SOURCE_DIR_NAME_STRIPPED}"
			# echo "PROJECT_SPECIFIC_PROFILE is ${PROJECT_SPECIFIC_PROFILE}"

			if [[ ! -a "${PROJECT_SPECIFIC_PROFILE}" ]]; then
				echo "No such project-specific Conan file ${PROJECT_SPECIFIC_PROFILE} exists"
				return 1
			fi

			conan install --build outdated --build cascade --install-folder "${NINJA_VERSION_OF_FOLDER}" . --profile "${PROFILE_NAME}" --profile "project/${PROJECT_SOURCE_DIR_NAME_STRIPPED}"
		fi
		cmake -B "${NINJA_VERSION_OF_FOLDER}" -S . -D "CMAKE_TOOLCHAIN_FILE:FILEPATH=${CMAKE_TOOLCHAIN_FILE}" -D "CMAKE_MODULE_PATH:PATH=${ABS_NINJA_VERSION_OF_FOLDER}"
		set +x
	done

	# Confirm completion
	echo "$funcstack[1]: Done."
)}

export       MXX_BASE_COMPILE_ARGS='-x c++ -std=c++17 -fPIC -ftemplate-backtrace-limit=0'
export MXX_BASE_CLANG_COMPILE_ARGS="${MXX_BASE_COMPILE_ARGS} -fcolor-diagnostics"
export   MXX_BASE_GCC_COMPILE_ARGS="${MXX_BASE_COMPILE_ARGS} -fdiagnostics-color"

export       TEL_BASE_COMPILE_ARGS='-x c++ -std=c++17       -ftemplate-backtrace-limit=0'
export TEL_BASE_CLANG_COMPILE_ARGS="${TEL_BASE_COMPILE_ARGS} -fcolor-diagnostics"
export   TEL_BASE_GCC_COMPILE_ARGS="${TEL_BASE_COMPILE_ARGS} -fdiagnostics-color"

export            COMPILE_WARNINGS='-ftabstop=2 -W -Wall -Werror -Wextra -Wcast-qual -Wconversion -Wformat=2 -Wno-unused-local-typedef -Wnon-virtual-dtor -Wshadow -Wsign-compare -Wsign-conversion -pedantic'

function xlomp {
	echo "\033[1;34mClang compiling $@\033[0m"
	clang++              -stdlib=libc++ -S ${=CMAKE_EXTRACTED_COMPILE_FLAGS} ${=MXX_BASE_CLANG_COMPILE_ARGS} ${=COMPILE_WARNINGS} -o /tmp/.xlomp.dummy.o -c $@
}
function xomp {
	echo "\033[1;34mGCC compiling $@\033[0m"
	~/source/gcc/bin/g++                -S ${=CMAKE_EXTRACTED_COMPILE_FLAGS} ${=MXX_BASE_GCC_COMPILE_ARGS}   ${=COMPILE_WARNINGS} -o /tmp/.xomp.dummy.o  -c $@
}
function xlentr {
	echo "\033[1;34mWatching clang-compiling $@\033[0m"
	msc | entr -cs 'clang++              -stdlib=libc++ -S ${=CMAKE_EXTRACTED_COMPILE_FLAGS} ${=MXX_BASE_CLANG_COMPILE_ARGS} ${=COMPILE_WARNINGS} -o /tmp/.xlentr.dummy.o -c '$@' |& head -n 30'
}
function xentr {
	echo "\033[1;34mWatching GCC-compiling $@\033[0m"
	msc | entr -cs '~/source/gcc/bin/g++                -S ${=CMAKE_EXTRACTED_COMPILE_FLAGS} ${=MXX_BASE_GCC_COMPILE_ARGS}    ${=COMPILE_WARNINGS} -o /tmp/.xentr.dummy.o -c '$@' |& head -n 30'
}
function xtidy {
	echo "\033[1;34mRunning clang-tidy $@\033[0m"
	~/source/llvm/bin/clang-tidy '-checks=*,-altera*,-fuchsia*,-google-build-using-namespace,-google-runtime-references,-llvmlibc*,-modernize-use-trailing-return-type,-readability-named-parameter' "$1" -- "${@:2}" ${=CMAKE_EXTRACTED_COMPILE_FLAGS} ${=MXX_BASE_CLANG_COMPILE_ARGS} ${=COMPILE_WARNINGS}
}
# unbuffer is in the 'expect' package and it tricks clang-tidy into thinking it's outputting to a terminal
function xtidyentr {
	echo "\033[1;34mWatching clang-tidy $@\033[0m"
	msc | entr -cs 'unbuffer ~/source/llvm/bin/clang-tidy '\''-checks=*,-altera*,-fuchsia*,-google-build-using-namespace,-google-runtime-references,-llvmlibc*,-modernize-use-trailing-return-type,-readability-named-parameter'\'' '"$1"' -- '"${@:2}"' ${=CMAKE_EXTRACTED_COMPILE_FLAGS} ${=MXX_BASE_CLANG_COMPILE_ARGS} ${=COMPILE_WARNINGS} |& head -n 30'
}





function clomp {
	echo "\033[1;34mClang compiling $@\033[0m"

	clang++              -stdlib=libc++ -S ${=TEL_BASE_CLANG_COMPILE_ARGS} ${=CMAKE_EXTRACTED_COMPILE_FLAGS} ${=COMPILE_WARNINGS} -o /tmp/.xlomp.dummy.o -c $@
}
function comp {
	echo "\033[1;34mGCC compiling $@\033[0m"
	~/source/gcc/bin/g++                -S ${=CMAKE_EXTRACTED_COMPILE_FLAGS} ${=TEL_BASE_GCC_COMPILE_ARGS}   ${=COMPILE_WARNINGS} -o /tmp/.xomp.dummy.o  -c $@
}
function clentr {
	echo "\033[1;34mWatching clang-compiling $@\033[0m"
	lsc | entr -cs 'clang++              -stdlib=libc++ -S ${=TEL_BASE_CLANG_COMPILE_ARGS} ${=CMAKE_EXTRACTED_COMPILE_FLAGS} ${=COMPILE_WARNINGS} -o /tmp/.xlentr.dummy.o -c '$@' |& head -n 30'
}
function centr {
	echo "\033[1;34mWatching GCC-compiling $@\033[0m"
	lsc | entr -cs '~/source/gcc/bin/g++                -S ${=CMAKE_EXTRACTED_COMPILE_FLAGS} ${=TEL_BASE_GCC_COMPILE_ARGS}    ${=COMPILE_WARNINGS} -o /tmp/.xentr.dummy.o -c '$@' |& head -n 30'
}
function ctidy {
	echo "\033[1;34mRunning clang-tidy $@\033[0m"
	~/source/llvm/bin/clang-tidy '-checks=*,-altera*,-fuchsia*,-google-build-using-namespace,-google-runtime-references,-llvmlibc*,-modernize-use-trailing-return-type,-readability-named-parameter' "$1" -- "${@:2}" ${=TEL_BASE_CLANG_COMPILE_ARGS} ${=CMAKE_EXTRACTED_COMPILE_FLAGS} ${=COMPILE_WARNINGS}
}

# unbuffer is in the 'expect' package and it tricks clang-tidy into thinking it's outputting to a terminal
function ctidyentr {
	echo "\033[1;34mWatching clang-tidy $@\033[0m"
	lsc | entr -cs 'unbuffer ~/source/llvm/bin/clang-tidy '\''-checks=*,-altera*,-fuchsia*,-google-build-using-namespace,-google-runtime-references,-llvmlibc*,-modernize-use-trailing-return-type,-readability-named-parameter'\'' '"$1"' -- '"${@:2}"' ${=TEL_BASE_CLANG_COMPILE_ARGS} ${=CMAKE_EXTRACTED_COMPILE_FLAGS} ${=COMPILE_WARNINGS} |& head -n 30'
}

function nar() {
	ninja -C "${BUILDTYPE}" -k 0 $1                                            &&            "${BUILDTYPE}/bin/$1" $@[2,-1]
}
function nar-debug() {
	ninja -C "${BUILDTYPE}" -k 0 $1                                            && gdb --args "${BUILDTYPE}/bin/$1" $@[2,-1]
}
function narc() {
	ninja -C "${BUILDTYPE}" -k 0 $1 |& ~/puppet/perl/tools/makeoutputparser.pl &&            "${BUILDTYPE}/bin/$1" $@[2,-1]
}
function narc-debug() {
	ninja -C "${BUILDTYPE}" -k 0 $1 |& ~/puppet/perl/tools/makeoutputparser.pl && gdb --args "${BUILDTYPE}/bin/$1" $@[2,-1]
}
# TODO: Get used to na and then remove ninjaall
function ninjaall() {
	ls -1d ninja_* | tr '\n' '\0' | xargs -0 -I VAR ninja -C VAR -k 0 "$@"
}
function na() {
	ls -1d ninja_* | tr '\n' '\0' | xargs -0 -I VAR ninja -C VAR -k 0 "$@"
}
function nbt() {
	ninja -C "${BUILDTYPE}" -k 0 $@
}
function ctbt() {
	( cd "${BUILDTYPE}" ; ctest $@ )
}
function ca() {
	ORIG_LOCATION=$PWD
	for ninja_dir in $PWD/ninja_*; do
		( cd "$ninja_dir" ; ctest $@ )
	done
}
function ninjac() {
	ninja $@ | ~/puppet/perl/tools/makeoutputparser.pl
}

function extract-flags {
	TEMP_EXTRACT_PROFILE_TYPE=${BUILDTYPE#"ninja_"}
	CONAN_PROFILE_FILE_ARGS=" "
	if [[ -f 'conanfile.txt' || -f 'conanfile.py' ]]; then
		CONAN_PROFILE_FILE_ARGS="--conan-profile ${TEMP_EXTRACT_PROFILE_TYPE} "
	fi
	NEW_ARGS=$( MXX_EDIT_SUITE_PROJECT_LEVEL=COMPLETE extract-cmake-flags.py ${=CONAN_PROFILE_FILE_ARGS} -- -D CMAKE_TOOLCHAIN_FILE:FILEPATH=$( ls -1d ~/puppet/toolchain-files/${TEMP_EXTRACT_PROFILE_TYPE}.cmake ) -D CMAKE_MODULE_PATH:PATH=#EXTRACT_BUILD_DIR# 2> /dev/null )
	export CMAKE_EXTRACTED_COMPILE_FLAGS=" $NEW_ARGS "
	echo "Updated CMAKE_EXTRACTED_COMPILE_FLAGS to : '$CMAKE_EXTRACTED_COMPILE_FLAGS'"
}

function bt() {
	OLD_BUILD_TYPE=${BUILDTYPE}
	SELECT_BUILD_TYPE_EXE_REL=$( which select-build-type.py )
	SELECT_BUILD_TYPE_EXE=$( realpath "${SELECT_BUILD_TYPE_EXE_REL}" )
	SELECT_BUILD_TYPE_EXE_DIR=$(dirname -- "${SELECT_BUILD_TYPE_EXE}" )
	OUTPUT_SCRIPT=$(mktemp -u)
	"${SELECT_BUILD_TYPE_EXE_DIR}/.venv/bin/python" "${SELECT_BUILD_TYPE_EXE}" "${OUTPUT_SCRIPT}"
	source "${OUTPUT_SCRIPT}"
	echo "BUILDTYPE : ${OLD_BUILD_TYPE} -> ${BUILDTYPE}"
}

function email-for-git() {
	SELECT_BUILD_TYPE_EXE_REL=$( which email-for-git.py )
	SELECT_BUILD_TYPE_EXE=$( realpath "${SELECT_BUILD_TYPE_EXE_REL}" )
	SELECT_BUILD_TYPE_EXE_DIR=$(dirname -- "${SELECT_BUILD_TYPE_EXE}" )
	"${SELECT_BUILD_TYPE_EXE_DIR}/.venv/bin/python" "${SELECT_BUILD_TYPE_EXE}"
}

function martha-runner() {
	SELECT_BUILD_TYPE_EXE_REL=$( which martha-runner.py )
	SELECT_BUILD_TYPE_EXE=$( realpath "${SELECT_BUILD_TYPE_EXE_REL}" )
	SELECT_BUILD_TYPE_EXE_DIR=$(dirname -- "${SELECT_BUILD_TYPE_EXE}" )
	"${SELECT_BUILD_TYPE_EXE_DIR}/.venv/bin/python" "${SELECT_BUILD_TYPE_EXE}" $@
}

alias mr='martha-runner'

function pymol-pdb() {
	/usr/bin/pymol -d "load $1, format=pdb; show_as cartoon, polymer; bg_color white; util.cbc;"
}

unsetopt share_history

# Commands to remember to use:
#   bc      An arbitrary precision calculator language
#   cloc    Count Lines Of Code
#   column  Form input into aligned columns
#   combine Like comm but more general (and/not/or/xor; files needn't be pre-sorted) (in Ubuntu package 'moreutils')
#   comm    Find common lines in sorted files
#   entr    Rerun a command whenever any of a bunch of files is updated
#   join    Join (Like a database join) sorted files (pre sort with -k 1b,1)
#   ncdu    Disk usage navigator
#   paste   Horizontally join files
#   pee     Pipe input to multiple commands (a la tee) (in Ubuntu package 'moreutils')
#   pv      Quantify amount of data going through a pipe ("pipe viewer") (in Ubuntu package 'pv')
#   rename  Perl extension for renaming multiple files
#   strings Print all the strings in a binary
#   ts      Prepend a timestamp before each line of stdin (in Ubuntu package 'moreutils')
#   vipe    Run a text-editor to tweak data as it's passed through a pipe (in Ubuntu package 'moreutils')
#
# awk, find, grep, sed, seq, sort, tr, uniq, wc, xargs
#
# (oh-my-)zsh tricks to remember to use:
#   g...  (git ...)
#   la... (ls -lAh)
#   ll... (ls -lh)

# # Append something like this to the prompt: $'\u00A0'
# nbsp=$'\u00A0'
# bindkey -s $nbsp '^u'

# #alias clomp                    'echo "\033[1;34mClang compiling \!:1\033[0m" ; clang++ -DBOOST_LOG -std=c++17 -stdlib=libc++ -fcolor-diagnostics -W -Wall -Werror -Wextra -Wno-unused-local-typedef -Wsign-compare -Wcast-qual -Wconversion -Wnon-virtual-dtor -pedantic -ftemplate-backtrace-limit=0             -S        -o /tmp/.comp_clang.dummy.o -isystem /opt/include -isystem range-v3/include -isystem third-party-code/boost-pool-detail-singleton -isystem third-party-code/gnuplot-iostream -isystem rapidjson/include -I /usr/local/cuda/include -I source \!* |& sed '\''s/source\///g'\'' ; '
# #alias comp                     'echo "\033[1;34mGCC compiling \!:1\033[0m"   ; g++     -DBOOST_LOG -std=c++17                                    -W -Wall -Werror -Wextra                           -Wsign-compare -Wcast-qual -Wconversion -Wnon-virtual-dtor -pedantic -ftemplate-backtrace-limit=0 -ftabstop=2 -S -x c++ -o /tmp/.comp_gcc.dummy.o   -isystem /opt/include -isystem range-v3/include -isystem third-party-code/boost-pool-detail-singleton -isystem third-party-code/gnuplot-iostream -isystem rapidjson/include -I /usr/local/cuda/include -I source \!* |& head -n 800 |& ~/puppet/perl/tools/makeoutputparser.pl '
# #alias grep                     'grep --color=auto '
# #alias grepcol                  'grep --color=always '
# #alias kate                     'kate -u '
# #alias mar                      /usr/bin/make \!:1 -k -j 3 -C ${BUILDTYPE} |& ~/puppet/perl/tools/makeoutputparser.pl && ${BUILDTYPE}/\!:1 \!:2*'
# alias ack                       'ack-grep --nogroup'
# alias cd                        'cd \!*;set prompt="`whoami`@`hostname` $cwd\/ \: "'
# alias ls                        'ls --color=auto '
# alias lsbigmov                  'find . \( -name "*.mp4" -o -name "*.wmv" -o -name "*.mp*g" -o -name "*.avi" -o -name "*.mov" -o -name "*.flv" -o -name "*.asf" \) -a -size +30M'
# alias lsmov                     'find . -name "*.mp4" -o -name "*.wmv" -o -name "*.mp*g" -o -name "*.avi" -o -name "*.mov" -o -name "*.flv" -o -name "*.asf"'
# alias mplayer                   'mplayer -fs -zoom'
# alias sourcesnontest            'lsc | grep -P "\.cpp" | grep -vP "test\.cpp"'
# alias sourcestest               'lsc | grep -P "test\.cpp" | grep -vP "^test\.cpp"'
# alias speedtest                 'wget "http://www.mirrorservice.org/sites/mirror.centos.org/5.4/isos/i386/CentOS-5.4-i386-bin-4of6.iso"'
# alias summarise                 'exiftool * | grep -P "File Name.*|Title|Lyrics|Comment"'
# alias unlimit                   'limit vmemoryuse unlimited ; limit memoryuse unlimited ; '

# # setenv LD_LIBRARY_PATH  /usr/local/cuda/lib64
# # setenv LD_LIBRARY_PATH  /usr/local/cuda/lib64
# setenv BOOST_TEST_CATCH_SYSTEM_ERRORS no
# setenv BOOST_TEST_SHOW_PROGRESS yes
# setenv CUDA_TOOLKIT_ROOT_DIR /usr/local/cuda
# setenv GREP_COLORS   'ms=01;31:mc=01;31:sl=:cx=:fn=35:ln=32:bn=32:se=36'
# setenv GREP_OPTIONS '--colour=auto --exclude-dir .svn --exclude-dir .deps'
# setenv LD_LIBRARY_PATH  /usr/local/cuda/lib64

eval "$(mcfly init zsh)"

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
